from flask import Flask, render_template
import pandas as pd
import numpy as np
import h5py
from flask import request
import json
# DL PACKETS
from keras.models import Sequential
from keras.layers import Dense
# from keras.layers.advanced_activations import LeakyReLU
from sklearn.model_selection import train_test_split
import tensorflow as tf
import pickle
from flask_cors import CORS

import matplotlib.pyplot as plt
from keras.models import Sequential, load_model
from keras.layers import Dense
# from keras.layers.advanced_activations import LeakyReLU
from sklearn.model_selection import train_test_split
import tensorflow as tf



app = Flask(__name__, template_folder = 'template')

@app.route('/', methods=['GET'])
def index():
    return render_template('index.html')
CORS(app)
@app.route('/enes', methods=['POST'])
def enes():
    try:
        # geting the json request
        jsonn = request.form['data']
        signal_e =json.loads(jsonn)
        # print(json)
        # call render_pdf function with new value
        filename = "rPPG-BP-UKL_rppg_7s.h5"

        f = h5py.File(filename, "r")
        datasetNames = [n for n in f.keys()]

        # DATA

        df_rppg = pd.DataFrame(np.array(h5py.File(filename)['rppg']))
        df_id = pd.DataFrame(np.array(h5py.File(filename)['subject_idx']))
        df_label = pd.DataFrame(np.array(h5py.File(filename)['label']))
        df_label = df_label.T.rename(columns={0: "Sys", 1: "Dia"})
        df = pd.concat([df_rppg.T, df_label.reindex(df_rppg.T.index)], axis=1)
        X = df.iloc[:,:-2] 
        y = df.iloc[:,875:] # BOTH Systolic and Diastolic
        y = y.values 
        X_new = df.iloc[:,:180]

        x_train, x_test, y_train, y_test_3 = train_test_split(X_new , y, test_size=0.2, random_state=0)

        model7 = Sequential()
        model7.add(Dense(96, input_dim = 180, activation='relu'))
        model7.add(Dense(84, activation='relu'))
        model7.add(Dense(72, activation='relu'))
        model7.add(Dense(60, activation='relu'))
        model7.add(Dense(48, activation='relu'))
        model7.add(Dense(36, activation='relu'))
        model7.add(Dense(24, activation='relu'))
        model7.add(Dense(12, activation='relu'))
        model7.add(Dense(2, activation='relu'))

        model7.compile(loss='mean_squared_error', optimizer='adam', metrics=[tf.keras.metrics.MeanAbsoluteError()])
        # model7.fit(x_train, y_train, epochs=500, batch_size=64)

        model7 = load_model('model_5.h5')


        # d = [-0.19395743310451508,-0.13397778570652008,-0.06642476469278336,-0.00400609290227294,0.04940028488636017,0.1056060791015625,0.17126771807670593,0.25075361132621765,0.3304878771305084,0.385836124420166,0.3902944028377533,0.3280150294303894,0.19947871565818787,0.02291148714721203,-0.16587123274803162,-0.3201744556427002,-0.4043360650539398,-0.4104035198688507,-0.36546677350997925,-0.3044014275074005,-0.24522922933101654,-0.18511442840099335,-0.11113037168979645,-0.027769535779953003,0.06156091392040253,0.14375369250774384,0.2204512059688568,0.28527283668518066,0.3213392496109009,0.3095156252384186,0.23773613572120667,0.1294040083885193,0.00886403676122427,-0.1044655591249466,-0.2065752148628235,-0.2890903651714325,-0.33529770374298096,-0.3375154435634613,-0.3064318299293518,-0.26670417189598083,-0.224334254860878,-0.16030514240264893,-0.037550561130046844,0.13837218284606934,0.33715665340423584,0.505218505859375,0.6209288239479065,0.6616799831390381,0.6141523718833923,0.46817365288734436,0.24724945425987244,-0.000021440908312797546,-0.219168022274971,-0.375104695558548,-0.4593260884284973,-0.4823637902736664,-0.4545128047466278,-0.3858606219291687,-0.275950163602829,-0.149588480591774,-0.02973109669983387,0.0444100946187973,0.07027456909418106,0.050793107599020004,0.031174587085843086,0.04778067767620087,0.13081292808055878,0.23930446803569794,0.3136889934539795,0.29787367582321167,0.19707173109054565,0.04643579199910164,-0.10031749308109283,-0.20072254538536072,-0.23266632854938507,-0.20702007412910461,-0.1528751701116562,-0.09664773941040039,-0.04982328042387962,-0.018707968294620514,-0.0064563569612801075,-0.01043056882917881,-0.01623682491481304,-0.008313526399433613,0.0188070647418499,0.05872868001461029,0.09683024138212204,0.12068737298250198,0.12985946238040924,0.12695743143558502,0.11933128535747528,0.09914843738079071,0.06371089816093445,0.007436198648065329,-0.05992235988378525,-0.12099021673202515,-0.15762588381767273,-0.1657705008983612,-0.15945737063884735,-0.14917117357254028,-0.13249628245830536,-0.1018509566783905,-0.05918792635202408,-0.017232712358236313,0.020971041172742844,0.057372190058231354,0.10261250287294388,0.15965959429740906,0.23144583404064178,0.30801400542259216,0.3716323971748352,0.40726399421691895,0.38340258598327637,0.2870757579803467,0.10093791037797928,-0.10274682939052582,-0.2685244679450989,-0.34004607796669006,-0.3625195026397705,-0.37544527649879456,-0.4074031710624695,-0.4400412142276764,-0.44137129187583923,-0.39309513568878174,-0.28794974088668823,-0.14049796760082245,0.03278353065252304,0.20502431690692902,0.3552732467651367,0.4628975987434387,0.5185611844062805,0.5143548250198364,0.4504460096359253,0.32919228076934814,0.1631823182106018,-0.020226500928401947,-0.17662878334522247,-0.26940417289733887,-0.29052549600601196,-0.2698424458503723,-0.23697537183761597,-0.20644645392894745,-0.1698295921087265,-0.12296345084905624,-0.0725134015083313,-0.023371445015072823,0.022308936342597008,0.0754413902759552,0.12982065975666046,0.1778223067522049,0.20719653367996216,0.2210918813943863,0.22519740462303162,0.2093498855829239,0.16233161091804504,0.08167611062526703,-0.0065857539884746075,-0.08127100765705109,-0.1386258453130722,-0.18994520604610443,-0.2347329556941986,-0.2547788918018341,-0.22998972237110138,-0.16674168407917023,-0.09261948615312576,-0.039033591747283936,-0.011466680094599724,0.0019848591182380915,0.01615481823682785,0.03708353638648987,0.06880908459424973,0.11225734651088715,0.1596776843070984,0.18958507478237152,0.1837269514799118,0.13547749817371368,0.05332048609852791,-0.04175598546862602,-0.121566042304039,-0.15176013112068176]

        pred_BP = model7.predict([signal_e])
        
    # print(singal)
        
        BP = str(int(pred_BP[0][0])) + '/' + str(int(pred_BP[0][1]))
        # '0' meaning no error
        # print(json.dumps(a))
        return BP

    except Exception as error:
        return str(error)
    


    

if __name__ == '__main__':
    app.run(debug=True)
    